{"version":3,"sources":["Projects/Falling.mp4","BottomWatermark.js","BGVideo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BottomWatermark","style","position","width","bottom","left","fontSize","color","right","BGVideo","autoPlay","loop","muted","height","objectFit","transform","zIndex","filter","src","FallingWhere","type","App","display","placeItems","fontFamily","flexDirection","alignItems","minWidth","textAlign","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,qC,oICgC5BC,MA9Bf,WACI,OACI,6BACI,yBAAKC,MAAS,CACVC,SAAU,QACVC,MAAO,OACPC,OAAQ,MACRC,KAAM,SAEN,0BAAMJ,MAAS,CAACK,SAAU,MAAOC,MAAO,UAAxC,aAEA,0CAIJ,yBAAKN,MAAS,CACVC,SAAU,QACVC,MAAO,OACPC,OAAQ,MACRI,MAAO,SAEP,0BAAMP,MAAS,CAACK,SAAU,MAAOC,MAAO,UAAxC,eAEA,yC,gBCrBD,SAASE,IACpB,OACI,6BACI,2BAAOC,SAAW,WAAWC,KAAO,OAAOC,OAAK,EAACX,MAAS,CACtDC,SAAU,WACVC,MAAO,OACPE,KAAM,MACNG,MAAO,MACPK,OAAQ,OACRC,UAAW,QACXC,UAAW,sBACXC,OAAQ,KACRC,OAAQ,oBAER,4BAAQC,IAAOC,IAAcC,KAAO,gBCwBrCC,MApCf,WACE,OACE,6BACE,yBAAKpB,MAAS,CAACe,OAAQ,OACrB,kBAACP,EAAD,OAGF,yBAAKR,MAAS,CACZqB,QAAS,OACTC,WAAY,SACZV,OAAQ,QACRN,MAAO,QACPiB,WAAY,SACZR,OAAQ,MAER,yBAAKf,MAAS,CACZqB,QAAS,OACTG,cAAe,SACfC,WAAY,SACZvB,MAAO,MACPwB,SAAU,QACVC,UAAW,WAEX,0BAAM3B,MAAS,CAAC4B,WAAY,MAAOvB,SAAU,QAA7C,eACA,0BAAML,MAAS,CAAC4B,WAAY,MAAOvB,SAAU,UAA7C,2BAIJ,yBAAKL,MAAS,CAACe,OAAQ,MACrB,kBAAC,EAAD,SCvBYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fff822b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Falling.4336a3fb.mp4\";","import React from 'react'\r\n\r\nfunction BottomWatermark() {\r\n    return (\r\n        <div>\r\n            <div style = {{\r\n                position: 'fixed',\r\n                width: 'auto',\r\n                bottom: '5px',\r\n                left: '10px'\r\n            }}>\r\n                <span style = {{fontSize: '1em', color: 'white'}}>\r\n                Made Using\r\n                <b> React.JS</b>\r\n                </span>\r\n            </div>\r\n\r\n            <div style = {{\r\n                position: 'fixed',\r\n                width: 'auto',\r\n                bottom: '5px',\r\n                right: '10px'\r\n            }}>\r\n                <span style = {{fontSize: '1em', color: 'white'}}>\r\n                Â© Literal\r\n                <b>Wizard</b>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BottomWatermark;","import React from 'react'\r\n\r\nimport FallingWhere from './Projects/Falling.mp4'\r\n\r\nexport default function BGVideo() {\r\n    return (\r\n        <div>\r\n            <video autoPlay = 'autoplay' loop = 'loop' muted style = {{\r\n                position: 'absolute',\r\n                width: '100%',\r\n                left: '50%',\r\n                right: '50%',\r\n                height: '100%',\r\n                objectFit: 'cover',\r\n                transform: 'translate(-50%, 0%)',\r\n                zIndex: '-1',\r\n                filter: 'brightness(50%)'\r\n                }}>\r\n                <source src = {FallingWhere} type = 'video/mp4'/>\r\n            </video>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\n//import styles from './App.css';\n\nimport BottomWatermark from './BottomWatermark'\nimport BGVideo from './BGVideo'\n\nfunction App() {\n  return (\n    <div>\n      <div style = {{zIndex: '-1'}}>\n        <BGVideo/>\n      </div>\n\n      <div style = {{\n        display: 'grid',\n        placeItems: 'center',\n        height: '100vh',\n        color: 'white',\n        fontFamily: 'Oswald',\n        zIndex: '0',\n      }}>\n        <div style = {{\n          display: \"flex\",\n          flexDirection: 'column',\n          alignItems: \"center\",\n          width: \"30%\",\n          minWidth: '400px',\n          textAlign: \"center\",\n        }}>\n          <span style = {{fontWeight: '200', fontSize: '5em'}}>Hello There</span>\n          <span style = {{fontWeight: '400', fontSize: '2.1em'}}>I'm Mashood Ur Rehman</span>\n        </div>\n      </div>\n\n      <div style = {{zIndex: '2'}}>\n        <BottomWatermark/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}